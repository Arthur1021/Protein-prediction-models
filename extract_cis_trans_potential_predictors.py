import glob
import argparse
import os, sys
import shutil
import multiprocessing.dummy as mp
parser = argparse.ArgumentParser()
parser.description='This script is used to extract cis and trans protential predictors'
parser.add_argument('-cis_GWAS',type = str,help=('input cis GWAS result files folder, generated by plink adjust, required'),required=True)
parser.add_argument('-trans_GWAS',type = str,help=('input trans GWAS result files folder, generated by plink adjust, required'),required=True)
parser.add_argument('-bfile',type = str,help=('input  bfile for GWAS analysis in the previous step, required'),required=True)
parser.add_argument('-flank',type = int,default = 100000, help=('distance of up and down from significant QTL, defalut is 100k, optional'),required=False)
parser.add_argument('-pvalue',type = float,help=('p-value of significant SNP, required. eg. 5e-9'),required=True)
parser.add_argument('-parallel',type = str,default = 2, help=('parallel computing, default is 2, bigger number will not boost analysis, optional'),required=False)
parser.add_argument('-odir',type = str,default = './', help=('output dir'),required=False)

args = parser.parse_args()

if not os.path.exists(args.odir):
    os.mkdir(args.odir)

#generate ambiguous SNPs file 
#generate chromosome converter file [none ambiguous SNPs](update all chromosome number to Z)

print ('generate Chr_converter.txt file.')
print ('generate ambiguous_SNPs.txt file.')
print ('generate rsID position dictionary')
outfile_chr_converter = open(args.odir +'/'+'Chr_converter.txt',"w")
outfile_ambiguous = open (args.odir +'/'+'ambiguous_snp.txt','w')
rsID_position = {}
bim_file = open (args.bfile+'.bim','r')
for myline in bim_file:
    myitem = myline.strip().split()
    rsID_position[myitem[1]] = myitem[0] + '\t' +myitem[3]
    if (myitem[4] == 'A' and myitem[5] == 'T') or (myitem[4] == 'T' and myitem[5] == 'A') or (myitem[4] == 'C' and myitem[5] == 'G') or (myitem[4] == 'G' and myitem[5] == 'C'):
        outfile_ambiguous.write(myitem[1]+'\n')
    else:
        outfile_chr_converter.write(myitem[1]+"\t"+"Z"+"\n")
bim_file.close()
outfile_chr_converter.close()
outfile_ambiguous.close()




# get GWAS result file names
path = args.trans_GWAS
full_path = os.path.abspath(path)
files = os.listdir(full_path)

glm_result_file =[]
for myfile in files:
    if myfile[-6:] == 'linear':
        glm_result_file.append(full_path+"/"+myfile)
glm_result_file.sort()
total = len (glm_result_file)
#get rsID for SNP instrument (remove SNP without Pvalue and ambigous SNP 'A/T T/A C/G G/C')
rsID_keep = []


infile = open (glm_result_file[0],'r')
head = infile.readline()
for myline in infile:
    myitem = myline.strip().split("\t")
    if myitem[-1] == 'NA' or (myitem[3] == 'A' and myitem[4] == 'T') or (myitem[3] == 'T' and myitem[4] == 'A') or (myitem[3] == 'C' and myitem[4] == 'G') or (myitem[3] == 'G' and myitem[4] == 'C'):
        continue
    else:
        rsID_keep.append(myitem[0]+"\t"+myitem[1]+'\t'+myitem[2])
infile.close()


print ('done')

cis_range = {}

#get cis region +/- 100kb
def get_cis_range(myfile):
    tmp = []
    infile = open(myfile,'r')
    tmpname = myfile.split("/")[-1].replace('.glm.linear.adjusted','')
    n = int((len(tmpname)-1)/2) # modify 7/19/2023 add int()
    name = myfile.split("/")[-1].replace('.glm.linear.adjusted','')[0:n]
    head = infile.readline()
    for myline in infile:
        myitem = myline.strip().split('\t')
        if float(myitem[-2]) < 0.05:
            pos1 = int(rsID_position[myitem[1]].split('\t')[1]) - args.flank
            pos2 = int(rsID_position[myitem[1]].split('\t')[1]) + args.flank
            # print (rsID_position[myitem[1]].split('\t')[0]+'\t'+str(pos1)+'\t'+str(pos2)+'\t'+name)
            tmp.append (rsID_position[myitem[1]].split('\t')[0]+'\t'+str(pos1)+'\t'+str(pos2)+'\t'+name)
    if len(tmp)>0:
        cis_range[name] = tmp     

cis_gwas_files = glob.glob(args.cis_GWAS+'/*glm.linear.adjusted')
if __name__=="__main__":
    p=mp.Pool(int(args.parallel))
    p.map(get_cis_range,cis_gwas_files)
    p.close()
    p.join()


def extract_potential_SNP_predictors(myfile): 
    tmp = myfile.split("/")[-1].replace('.glm.linear','') 
    n = int((len(tmp)-1)/2) # modify 7/19/2023 add int()
    name = myfile.split("/")[-1].replace('.glm.linear','')[0:n] #modified,9/10/2022, to match all protein names
    print (name)
    check_file_exist = args.odir +"/"+name +"_potential_SNP_predictors.txt" #modified, 9/11/2022, check if file exist
    if os.path.exists(check_file_exist):
        print (check_file_exist+' exist, skip...')
    else:
        significant_SNP_range = []
        if name in cis_range:
            significant_SNP_range = cis_range[name] # copy cis range 
        gwas_result_file = open (myfile,'r')
        head = gwas_result_file.readline()
        for myline in gwas_result_file:
            myitem = myline.strip().split("\t")
            if float(myitem[-1]) <= float(args.pvalue):
                upstream = str(int(myitem[1]) - args.flank)
                downstream = str(int(myitem[1]) + args.flank)
                content = myitem[0]+'\t'+upstream+'\t'+downstream+'\t'+name
                if content not in significant_SNP_range:
                    significant_SNP_range.append(myitem[0]+'\t'+upstream+'\t'+downstream+'\t'+name) #trans up/down 100kb
        # print (significant_SNP_range)
        if len(significant_SNP_range) > 0:
            outfile_range = open (args.odir+'/'+name+'_potential_SNP_predictors.txt','w')
            for myitem in significant_SNP_range:
                outfile_range.write(myitem+'\n')
            outfile_range.close()
            #7e. extract SNPs bfile file for next step with updated SNP and Chromosome name 
            print ('Extracting SNP potential predictors and convert to bfile format...')

            cmd = 'plink --bfile '+args.bfile+' --extract range ' +args.odir+'/'+name +'_potential_SNP_predictors.txt --exclude ' +args.odir +'/'+'ambiguous_snp.txt --update-chr '+args.odir +'/'+'Chr_converter.txt  --make-bed  --out ' + args.odir+'/'+name +'.noDup.unambig.Z --allow-extra-chr'+'\n'
            #cmd = 'plink2 --bfile '+args.bfile+' --extract range ' +args.odir+'/'+name +'_potential_SNP_predictors.txt   --make-bed  --out ' + args.odir+'/'+name +'.noDup.unambig.Z --allow-extra-chr'+'\n'

            print (cmd)
            os.system(cmd)     

if __name__=="__main__":
    p=mp.Pool(int(args.parallel))
    p.map(extract_potential_SNP_predictors,glm_result_file)
    p.close()
    p.join()



